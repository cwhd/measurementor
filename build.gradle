#!groovy    

apply from: file('conf/gradle/blueprint.gradle')
apply from: file('conf/gradle/check.gradle')


sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        maven  {
        	url "http://repo1.maven.org/maven2"
    	}
        maven { 
            credentials {
                username 'maven'
                password 'ludist'
            }
            url "http://repo.nikedev.com:8081/artifactory/all-repos"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.nike.gradle-continuousdelivery-plugin:gradle-continuousdelivery-plugin:2.+")
    }
}

apply plugin: 'spring-boot'
apply plugin: 'continuousdelivery'
apply plugin: 'sonar-runner'
apply plugin: 'jacoco' 

springBoot {
    mainClass = 'com.nike.mm.MeasurementorApplication'
}

bootRun {
    addResources = false
}

jar {
    baseName = 'measurementor'
    version = '0.0.1-SNAPSHOT'
}

apply plugin: 'war'

war {
    baseName = 'measurementor'
    version =  '0.0.1-SNAPSHOT'
}

configurations {
    providedRuntime
}

war {
    from 'ui/dist'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

task installNpm(type: Exec) {
    description = 'Install NPM, the Node Package Manager'
    workingDir 'ui'
    commandLine 'npm', 'install'
}

task installBower(type: Exec) {
    description = 'Install Bower, the Package Manager'
    workingDir 'ui'
    commandLine 'bower', 'install'
}

task buildWebApp(type: Exec) {
    description = 'Builds the web application'
    workingDir 'ui'
    commandLine 'grunt', 'build'
}

task copyWebApp(type: Copy) {
    from 'ui/dist'
    into 'src/main/webapp'
}

task cleanOutputFolders(type: Delete) {
    delete 'public', 'build', 'ui/dist', 'src/main/webapp'
}

tasks.buildWebApp.dependsOn installNpm, installBower
tasks.copyWebApp.dependsOn buildWebApp
tasks.war.dependsOn copyWebApp
tasks.run.dependsOn copyWebApp
tasks.bootRun.dependsOn copyWebApp
tasks.clean.dependsOn cleanOutputFolders

continuousDelivery { 
    setZuulElb 'http://qm-zuul.tools.nikecloud.com'
    setAsgardConfigLocation '/conf/qma/asgard/asgard-configuration.json'
    setRacks(['checkmarx', 'sonar'])
}
